{% from "dockers/dockerfile-macros.j2" import install_debian_packages, install_python_wheels, copy_files %}
FROM docker-python2-layer-buster

ARG docker_container_name
RUN [ -f /etc/rsyslog.conf ] && sed -ri "s/%syslogtag%/$docker_container_name#%syslogtag%/;" /etc/rsyslog.conf

# Make apt-get non-interactive
ENV DEBIAN_FRONTEND=noninteractive

# Update apt's cache of available packages
RUN apt-get update &&       \
    apt-get install -f -y   \
        gnupg               \
        gnupg1              \
        gnupg2              \
        libacl1             \
        libuuid1            \
        libxml2             \
        python-dev

RUN apt-get install -y -t buster-backports curl

RUN pip install wheel

{% if docker_acms_debs.strip() -%}
# Copy locally-built Debian package dependencies
{{ copy_files("debs/", docker_acms_debs.split(' '), "/debs/") }}

# Install locally-built Debian packages and implicitly install their dependencies
{{ install_debian_packages(docker_acms_debs.split(' ')) }}
{%- endif %}

{% if docker_acms_whls.strip() %}
# Copy locally-built Python wheel dependencies
{{ copy_files("python-wheels/", docker_acms_whls.split(' '), "/python-wheels/") }}

# Install locally-built Python wheel dependencies
{{ install_python_wheels(docker_acms_whls.split(' ')) }}
{% endif %}

# Create /acms directory to hold all files until runtime
RUN mkdir -p /acms

# Copy ACMS config file to the container
COPY ["acms_secrets.ini", "/acms"]
COPY ["acms.ini", "/acms"]

# Copy public key for downloading ACMS from Ubuntu repo
COPY ["msftPackagesKey.pgp", "/acms"]

# Placeholder for credentials
RUN mkdir -p /etc/sonic/credentials
RUN chmod 600 /etc/sonic/credentials

# Install ACMS
COPY ["install_acms.sh", "/acms"]
RUN cd /acms && sh install_acms.sh {{CONFIGURED_ARCH}}

RUN mkdir -p /etc/supervisor /var/log/supervisor

RUN apt-get purge -y python-dev

RUN apt-get clean -y      && \
    apt-get autoclean -y  && \
    apt-get autoremove -y && \
    rm -rf /debs
RUN rm -rf /var/lib/apt/lists/*

RUN rm -rf /tmp/*

COPY ["start.py", "cert_converter.py", "dSMS_config_modifier.py", "CA_cert_downloader.py", "/usr/bin/"]
COPY ["supervisord.conf", "/etc/supervisor/"]
COPY ["files/supervisor-proc-exit-listener", "/usr/bin"]
COPY ["critical_processes", "/etc/supervisor"]
COPY ["etc/rsyslog.conf", "/etc/rsyslog.conf"]
COPY ["etc/rsyslog.d/*", "/etc/rsyslog.d/"]
RUN [ -f /etc/rsyslog.conf ] && sed -ri "s/%syslogtag%/$docker_container_name#%syslogtag%/;" /etc/rsyslog.conf

ENTRYPOINT ["/usr/local/bin/supervisord"]
