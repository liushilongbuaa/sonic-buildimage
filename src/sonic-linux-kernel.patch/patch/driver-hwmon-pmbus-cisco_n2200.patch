Add Cisco N2200 PMBUS monitoring driver

From: Mike Tsai (Fruit Ninja) <miktsai@cisco.com>

- this PMBUS driver will expose N3K power supply attributes to lm-sensors
- A custom driver was needed because some of the attributes are operating in
'direct' mode and the proper coefficients needs to be supplied. (i.e vout,
iout)
- The driver itself is fairly similar to the generic pmbus driver.

Here is a snip of the output:
cisco_n2200-i2c-10-5b
Adapter: i2c-3-mux (chan_id 1)
vin:         +119.00 V  (crit min = +75.00 V, min = +80.00 V)
                       (max =  +0.00 V, crit max =  +0.00 V)
vcap:         +0.00 V
vout1:       +12.00 V  (crit min =  +0.00 V, min =  +0.00 V)
                       (max =  +0.00 V, crit max =  +0.00 V)
fan1:        12704 RPM
temp1:        +25.0 C  (low  =  +0.0 C, high = +105.0 C)
                       (crit low =  +0.0 C, crit = +115.0 C)
temp2:        +30.0 C  (low  =  +0.0 C, high = +105.0 C)
                       (crit low =  +0.0 C, crit = +115.0 C)
temp3:        +30.0 C  (low  =  +0.0 C, high = +105.0 C)
                       (crit low =  +0.0 C, crit = +115.0 C)
pin:          85.00 W  (max = 608.00 W)
pout1:        75.00 W  (max = 448.00 W, crit = 484.00 W)
                       (cap =   0.00 W)
iin:          +0.73 A  (max =  +6.00 A, crit max =  +0.00 A)
iout1:        +6.30 A  (crit min =  +0.00 A, max = +37.50 A)
                       (crit max = +40.50 A)

Reviewed-by: Peter Lei <peterlei@cisco.com>
Signed-off-by: Mike Tsai (Fruit Ninja) <miktsai@cisco.com>
---
 drivers/hwmon/pmbus/Kconfig       |   10 +
 drivers/hwmon/pmbus/Makefile      |    1 
 drivers/hwmon/pmbus/cisco_n2200.c |  296 +++++++++++++++++++++++++++++++++++++
 3 files changed, 307 insertions(+)
 create mode 100644 drivers/hwmon/pmbus/cisco_n2200.c

diff --git a/drivers/hwmon/pmbus/Kconfig b/drivers/hwmon/pmbus/Kconfig
index 39cc63e..ec48945 100644
--- a/drivers/hwmon/pmbus/Kconfig
+++ b/drivers/hwmon/pmbus/Kconfig
@@ -121,4 +121,14 @@ config SENSORS_ZL6100
 	  This driver can also be built as a module. If so, the module will
 	  be called zl6100.
 
+config SENSORS_CISCO_N2200
+	tristate "Cisco N2200 and compatibles"
+	default n
+	help
+	  If you say yes here you get hardware monitoring support for Cisco N2200
+	  AC/DC Controllers (For NEXUS N3K switches).
+
+	  This driver can also be built as a module. If so, the module will
+	  be called cisco_n2200
+
 endif # PMBUS
diff --git a/drivers/hwmon/pmbus/Makefile b/drivers/hwmon/pmbus/Makefile
index 789376c..5e6c316 100644
--- a/drivers/hwmon/pmbus/Makefile
+++ b/drivers/hwmon/pmbus/Makefile
@@ -13,3 +13,4 @@ obj-$(CONFIG_SENSORS_MAX8688)	+= max8688.o
 obj-$(CONFIG_SENSORS_UCD9000)	+= ucd9000.o
 obj-$(CONFIG_SENSORS_UCD9200)	+= ucd9200.o
 obj-$(CONFIG_SENSORS_ZL6100)	+= zl6100.o
+obj-$(CONFIG_SENSORS_CISCO_N2200) += cisco_n2200.o
diff --git a/drivers/hwmon/pmbus/cisco_n2200.c b/drivers/hwmon/pmbus/cisco_n2200.c
new file mode 100644
index 0000000..7a13c08
--- /dev/null
+++ b/drivers/hwmon/pmbus/cisco_n2200.c
@@ -0,0 +1,296 @@
+/*
+ * Hardware monitoring driver for Cisco N2200 PMBus devices
+ * (driver is replicated from standard pmbus.c)
+ *
+ * Copyright (c) 2014 Cisco Systems.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/err.h>
+#include <linux/slab.h>
+#include <linux/mutex.h>
+#include <linux/i2c.h>
+#include <linux/hwmon-sysfs.h>
+#include "pmbus.h"
+
+/* convert 'linear' data to readable form, replicated from pmbus_core */
+static long _reg2data_linear(const struct pmbus_driver_info *info, s16 data)
+{
+	s16 exponent;
+	s32 mantissa;
+	long val;
+
+	exponent = ((s16) data) >> 11;
+	mantissa = ((s16)((data & 0x7ff) << 5)) >> 5;
+
+	val = mantissa;
+	val = val * 1000L;
+
+	if (exponent >= 0)
+		val <<= exponent;
+	else
+		val >>= -exponent;
+
+	return val;
+}
+
+static long _reg2data_direct(const struct pmbus_driver_info *info,
+			     long val, int class)
+{
+	long m, b, R;
+
+	m = info->m[class];
+	b = info->b[class];
+	R = info->R[class];
+
+	if (m == 0)
+		return 0;
+
+	/* X = 1/m * (Y * 10^-R - b) */
+	R = -R;
+	/* scale result to milli-units for everything but fans */
+	if (class != PSC_FAN) {
+		R += 3;
+		b *= 1000;
+	}
+
+	/* scale result to micro-units for power sensors */
+	if (class == PSC_POWER) {
+		R += 3;
+		b *= 1000;
+	}
+
+	while (R > 0) {
+		val *= 10;
+		R--;
+	}
+	while (R < 0) {
+		val = DIV_ROUND_CLOSEST(val, 10);
+		R++;
+	}
+
+	return (val - b) / m;
+}
+
+/* convert readable data to 'direct' format, replicated from pmbus_core */
+static u16 _data2reg_direct(const struct pmbus_driver_info *info,
+			    long val, int class)
+{
+	long m, b, R;
+
+	m = info->m[class];
+	b = info->b[class];
+	R = info->R[class];
+
+	/* Power is in uW. Adjust R and b. */
+	if (class == PSC_POWER) {
+		R -= 3;
+		b *= 1000;
+	}
+
+	/* Calculate Y = (m * X + b) * 10^R */
+	if (class != PSC_FAN) {
+		R -= 3;		/* Adjust R and b for data in milli-units */
+		b *= 1000;
+	}
+	val = val * m + b;
+
+	while (R > 0) {
+		val *= 10;
+		R--;
+	}
+	while (R < 0) {
+		val = DIV_ROUND_CLOSEST(val, 10);
+		R++;
+	}
+
+	return val;
+}
+
+static int cisco_n2200_read_word_data(struct i2c_client *client,
+				      int page, int reg)
+{
+	int ldata;
+	long rval;
+	u16 dval;
+	const struct pmbus_driver_info *info = pmbus_get_driver_info(client);
+
+	switch (reg) {
+		/*
+		 * these two values are in linear format, but the iout is in
+		 * direct mode. pmbus_core assumes all fields in the same
+		 * class operate in the same mode. hence wrong values are
+		 * being reported. so we need to convert them from linear->data
+		 * and data->direct and let pmbus_core convert from direct->data
+		 */
+	case PMBUS_IOUT_OC_WARN_LIMIT:
+	case PMBUS_IOUT_OC_FAULT_LIMIT:
+		ldata = pmbus_read_word_data(client, page, reg);
+		if (ldata < 0)
+			goto out;
+		rval = _reg2data_linear(info, ldata);
+		dval = _data2reg_direct(info, rval, PSC_CURRENT_OUT);
+		return dval;
+	default:
+		break;
+	}
+
+ out:
+	return -ENODATA;
+}
+
+/*
+ * Find sensor groups and status registers on each page.
+ */
+static void pmbus_find_sensor_groups(struct i2c_client *client,
+				     struct pmbus_driver_info *info)
+{
+	int page;
+
+	/* Sensors detected on page 0 only */
+	if (pmbus_check_word_register(client, 0, PMBUS_READ_VIN))
+		info->func[0] |= PMBUS_HAVE_VIN;
+	if (pmbus_check_word_register(client, 0, PMBUS_READ_VCAP))
+		info->func[0] |= PMBUS_HAVE_VCAP;
+	if (pmbus_check_word_register(client, 0, PMBUS_READ_IIN))
+		info->func[0] |= PMBUS_HAVE_IIN;
+	if (pmbus_check_word_register(client, 0, PMBUS_READ_PIN))
+		info->func[0] |= PMBUS_HAVE_PIN;
+	if (info->func[0]
+	    && pmbus_check_byte_register(client, 0, PMBUS_STATUS_INPUT))
+		info->func[0] |= PMBUS_HAVE_STATUS_INPUT;
+	if (pmbus_check_byte_register(client, 0, PMBUS_FAN_CONFIG_12) &&
+		pmbus_check_word_register(client, 0, PMBUS_READ_FAN_SPEED_1)) {
+		info->func[0] |= PMBUS_HAVE_FAN12;
+		if (pmbus_check_byte_register(client, 0, PMBUS_STATUS_FAN_12))
+			info->func[0] |= PMBUS_HAVE_STATUS_FAN12;
+	}
+	if (pmbus_check_byte_register(client, 0, PMBUS_FAN_CONFIG_34) &&
+	    pmbus_check_word_register(client, 0, PMBUS_READ_FAN_SPEED_3)) {
+		info->func[0] |= PMBUS_HAVE_FAN34;
+		if (pmbus_check_byte_register(client, 0, PMBUS_STATUS_FAN_34))
+			info->func[0] |= PMBUS_HAVE_STATUS_FAN34;
+	}
+	if (pmbus_check_word_register(client, 0, PMBUS_READ_TEMPERATURE_1))
+		info->func[0] |= PMBUS_HAVE_TEMP;
+	if (pmbus_check_word_register(client, 0, PMBUS_READ_TEMPERATURE_2))
+		info->func[0] |= PMBUS_HAVE_TEMP2;
+	if (pmbus_check_word_register(client, 0, PMBUS_READ_TEMPERATURE_3))
+		info->func[0] |= PMBUS_HAVE_TEMP3;
+	if (info->func[0] & (PMBUS_HAVE_TEMP | PMBUS_HAVE_TEMP2
+			     | PMBUS_HAVE_TEMP3)
+		&& pmbus_check_byte_register(client, 0,
+		PMBUS_STATUS_TEMPERATURE))
+		info->func[0] |= PMBUS_HAVE_STATUS_TEMP;
+
+	/* Sensors detected on all pages */
+	for (page = 0; page < info->pages; page++) {
+		if (pmbus_check_word_register(client, page, PMBUS_READ_VOUT)) {
+			info->func[page] |= PMBUS_HAVE_VOUT;
+			if (pmbus_check_byte_register(client, page,
+						      PMBUS_STATUS_VOUT))
+				info->func[page] |= PMBUS_HAVE_STATUS_VOUT;
+		}
+		if (pmbus_check_word_register(client, page, PMBUS_READ_IOUT)) {
+			info->func[page] |= PMBUS_HAVE_IOUT;
+			if (pmbus_check_byte_register(client, 0,
+						      PMBUS_STATUS_IOUT))
+				info->func[page] |= PMBUS_HAVE_STATUS_IOUT;
+		}
+		if (pmbus_check_word_register(client, page, PMBUS_READ_POUT))
+			info->func[page] |= PMBUS_HAVE_POUT;
+	}
+}
+
+/*
+ * Identify chip parameters.
+ */
+static int pmbus_identify(struct i2c_client *client,
+			  struct pmbus_driver_info *info)
+{
+	int ret = 0;
+
+	/* only 1 page */
+	info->pages = 1;
+
+	/* VOUT and IOUT are in direct mode */
+	info->format[PSC_VOLTAGE_OUT] = direct;
+	info->m[PSC_VOLTAGE_OUT] = 1;
+	info->b[PSC_VOLTAGE_OUT] = 0;
+	info->R[PSC_VOLTAGE_OUT] = 1;
+
+	info->format[PSC_CURRENT_OUT] = direct;
+	info->m[PSC_CURRENT_OUT] = 1;
+	info->b[PSC_CURRENT_OUT] = 0;
+	info->R[PSC_CURRENT_OUT] = 1;
+
+	/* Try to find sensor groups  */
+	pmbus_find_sensor_groups(client, info);
+	return ret;
+}
+
+static int cisco_n2200_pmbus_probe(struct i2c_client *client,
+				   const struct i2c_device_id *id)
+{
+	struct pmbus_driver_info *info;
+
+	info = devm_kzalloc(&client->dev, sizeof(struct pmbus_driver_info),
+			    GFP_KERNEL);
+	if (!info)
+		return -ENOMEM;
+
+	info->pages = id->driver_data;
+	info->read_word_data = cisco_n2200_read_word_data;
+	info->identify = pmbus_identify;
+
+	return pmbus_do_probe(client, id, info);
+}
+
+static int cisco_n2200_do_remove(struct i2c_client *client)
+{
+	/* do the generic pmbus remove */
+	pmbus_do_remove(client);
+	return 0;
+}
+
+/*
+ * Use driver_data to set the number of pages supported by the chip.
+ */
+static const struct i2c_device_id cisco_n2200_id[] = {
+	{"cisco_n2200", 0},
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, cisco_n2200_id);
+
+/* This is the driver that will be inserted */
+static struct i2c_driver cisco_n2200_pmbus_driver = {
+	.driver = {
+		   .name = "cisco_n2200",
+		   },
+	.probe = cisco_n2200_pmbus_probe,
+	.remove = cisco_n2200_do_remove,
+	.id_table = cisco_n2200_id,
+};
+
+module_i2c_driver(cisco_n2200_pmbus_driver);
+
+MODULE_AUTHOR("Mike Tsai");
+MODULE_DESCRIPTION("Cisco N2200 AC/DC Controller PMBus driver");
+MODULE_LICENSE("GPL");
