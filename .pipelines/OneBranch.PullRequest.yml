trigger: none
pr:
  branches:
    include:
      - internal
      - internal-202012
  paths:
    exclude:
      - .github
resources:
  repositories:
  - repository: acs-buildimage
    type: git
    name: One/Networking-acs-buildimage
    ref: internal
  - repository: buildimage
    type: github
    name: sonic-net/sonic-buildimage
    ref: master
    endpoint: sonic-net

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

variables:
  - template: .azure-pipelines/template-variables.yml@acs-buildimage
  - template: .pipelines/azure-pipelines-repd-build-variables.yml@acs-buildimage

stages:
- stage: Build
  pool: sonic-image-builder-1ES
  variables:
    CACHE_MODE: rcache
    ${{ if eq(variables['Build.SourceBranchName'], '202012') }}:
      VERSION_CONTROL_OPTIONS: 'SONIC_VERSION_CONTROL_COMPONENTS=deb,py2,py3,web,git,docker'
  jobs:
  - template: ../.azure-pipelines/azure-pipelines-build.yml
    parameters:
      buildOptions: 'USERNAME=admin INCLUDE_RESTAPI=y SONIC_BUILD_JOBS=$(nproc) ${{ variables.VERSION_CONTROL_OPTIONS }}'
      jobGroups:
      - name: broadcom
        variables:
          swi_image: yes
      - name: mellanox
      preSteps:
        - template: .pipelines/prepare_agent.yml@acs-buildimage

- stage: BuildVS
  pool: sonic-image-builder-1ES
  dependsOn: []
  variables:
    CACHE_MODE: rcache
    SONIC_VERSION_CONTROL_COMPONENTS: deb,py2,py3,web,git,docker
  jobs:
  - template: .azure-pipelines/azure-pipelines-build.yml@acs-buildimage
    parameters:
      buildOptions: 'USERNAME=admin SONIC_BUILD_JOBS=$(nproc)'
      jobGroups:
      - name: vs
      preSteps:
        - template: .pipelines/prepare_agent.yml@acs-buildimage
      postSteps:
        - bash: |
            [[ $(git log --pretty=format:"%aE" | head -n 1) == "svc-acs@microsoft.com" ]] && echo skiptest && echo "##vso[task.setvariable variable=SKIP_VSTEST;isOutput=true]YES" || true
          name: SetVarInt

- stage: Test
  dependsOn: BuildVS
  condition: and(in(dependencies.BuildVS.result, 'Succeeded', 'SucceededWithIssues'), ne(stageDependencies.BuildVS.outputs['vs.SetVarInt.SKIP_VSTEST'], 'YES'))
  variables:
    - group: SONiC-Elastictest
    - name: inventory
      value: veos_vtb
    - name: testbed_file
      value: vtestbed.yaml

  # For every test job:
  # continueOnError: false means it's a required test job and will block merge if it fails
  # continueOnError: true means it's an optional test job and will not block merge even though it fails(unless a required test job depends on its result)

  jobs:
  - job: t0_elastictest
    pool:
      vmImage: 'ubuntu-20.04'
    displayName: "kvmtest-t0 by Elastictest"
    timeoutInMinutes: 240
    continueOnError: false
    steps:
      - template: ../.azure-pipelines/run-test-scheduler-template.yml
        parameters:
          TOPOLOGY: t0
          MIN_WORKER: $(T0_INSTANCE_NUM)
          MAX_WORKER: $(T0_INSTANCE_NUM)
          MGMT_BRANCH: internal-202012
          STOP_ON_FAILURE: False

  - job: t1_lag_elastictest
    pool:
      vmImage: 'ubuntu-20.04'
    displayName: "kvmtest-t1-lag by Elastictest"
    timeoutInMinutes: 240
    continueOnError: false
    steps:
      - template: ../.azure-pipelines/run-test-scheduler-template.yml
        parameters:
          TOPOLOGY: t1-lag
          MIN_WORKER: $(T1_LAG_INSTANCE_NUM)
          MAX_WORKER: $(T1_LAG_INSTANCE_NUM)
          MGMT_BRANCH: internal-202012
          STOP_ON_FAILURE: False

  - job: t0_2vlans_elastictest
    pool:
      vmImage: 'ubuntu-20.04'
    displayName: "kvmtest-t0-2vlans by Elastictest"
    timeoutInMinutes: 240
    continueOnError: false
    steps:
    - template: ../.azure-pipelines/run-test-scheduler-template.yml
      parameters:
        TOPOLOGY: t0
        TEST_SET: t0-2vlans
        MIN_WORKER: $(T0_2VLANS_INSTANCE_NUM)
        MAX_WORKER: $(T0_2VLANS_INSTANCE_NUM)
        MGMT_BRANCH: internal-202012
        DEPLOY_MG_EXTRA_PARAMS: "-e vlan_config=two_vlan_a"
        STOP_ON_FAILURE: False
