trigger: none
pr:
  branches:
    include:
      - internal
      - internal-202012
  paths:
    exclude:
      - .github
resources:
  repositories:
  - repository: acs-buildimage
    type: git
    name: One/Networking-acs-buildimage
    ref: internal
  - repository: buildimage
    type: github
    name: sonic-net/sonic-buildimage
    ref: master
    endpoint: sonic-net

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

variables:
  - template: .azure-pipelines/template-variables.yml@acs-buildimage
  - template: .pipelines/azure-pipelines-repd-build-variables.yml@acs-buildimage

stages:
- stage: Build
  pool: sonic-image-builder-1ES
  variables:
    CACHE_MODE: rcache
    ${{ if eq(variables['Build.SourceBranchName'], '202012') }}:
      VERSION_CONTROL_OPTIONS: 'SONIC_VERSION_CONTROL_COMPONENTS=deb,py2,py3,web,git,docker'
  jobs:
  - template: ../.azure-pipelines/azure-pipelines-build.yml
    parameters:
      buildOptions: 'USERNAME=admin INCLUDE_RESTAPI=y SONIC_BUILD_JOBS=$(nproc) ${{ variables.VERSION_CONTROL_OPTIONS }}'
      jobGroups:
      - name: vs
      - name: broadcom
        variables:
          swi_image: yes
      - name: mellanox
      preSteps:
        - template: .pipelines/prepare_agent.yml@acs-buildimage

- stage: Test
  dependsOn: Build
  condition: and(succeeded(), in(dependencies.Build.result, 'Succeeded', 'SucceededWithIssues'))
  variables:
    - group: SONiC-Testbed-Tools
    - name: inventory
      value: veos_vtb
    - name: testbed_file
      value: vtestbed.yaml

  # For every test job:
  # continueOnError: false means it's a required test job and will block merge if it fails
  # continueOnError: true means it's an optional test job and will not block merge even though it fails(unless a required test job depends on its result)

  jobs:
  - job: t0_testbedv2
    pool:
      vmImage: 'ubuntu-20.04'
    displayName: "kvmtest-t0 by TestbedV2"
    timeoutInMinutes: 240
    condition: and(succeeded(), eq(variables.BUILD_IMG_RUN_TESTBEDV2_TEST, 'YES'))
    continueOnError: false
    steps:
      - template: ../.azure-pipelines/run-test-scheduler-template.yml
        parameters:
          TOPOLOGY: t0
          MIN_WORKER: $(T0_INSTANCE_NUM)
          MAX_WORKER: $(T0_INSTANCE_NUM)

  - job: t1_lag_testbedv2
    pool:
      vmImage: 'ubuntu-20.04'
    displayName: "kvmtest-t1-lag by TestbedV2"
    timeoutInMinutes: 240
    condition: and(succeeded(), eq(variables.BUILD_IMG_RUN_TESTBEDV2_TEST, 'YES'))
    continueOnError: false
    steps:
      - template: ../.azure-pipelines/run-test-scheduler-template.yml
        parameters:
          TOPOLOGY: t1-lag
          MIN_WORKER: $(T1_LAG_INSTANCE_NUM)
          MAX_WORKER: $(T1_LAG_INSTANCE_NUM)

  - job: sonic_t0_testbedv2
    displayName: "kvmtest-t0-sonic by TestbedV2"
    pool:
      vmImage: 'ubuntu-20.04'
    timeoutInMinutes: 240
    condition: and(succeeded(), eq(variables.BUILD_IMG_RUN_TESTBEDV2_TEST, 'YES'))
    continueOnError: false
    steps:
      - template: ../.azure-pipelines/run-test-scheduler-template.yml
        parameters:
          TOPOLOGY: t0-64-32
          MIN_WORKER: $(T0_SONIC_INSTANCE_NUM)
          MAX_WORKER: $(T0_SONIC_INSTANCE_NUM)
          TEST_SET: t0-sonic
          COMMON_EXTRA_PARAMS: "--neighbor_type=sonic --enable_macsec --macsec_profile=128_SCI,256_XPN_SCI"
          VM_TYPE: vsonic
          SPECIFIED_PARAMS: '{\"test_pretest.py\":[\"--completeness_level=confident\",\"--allow_recover\"],\"test_posttest.py\":[\"--completeness_level=confident\",\"--allow_recover\"]}'

  - job: t0_2vlans_testbedv2
    pool:
      vmImage: 'ubuntu-20.04'
    displayName: "kvmtest-t0-2vlans by TestbedV2"
    timeoutInMinutes: 240
    condition: and(succeeded(), eq(variables.BUILD_IMG_RUN_TESTBEDV2_TEST, 'YES'))
    continueOnError: false
    steps:
    - template: ../.azure-pipelines/run-test-scheduler-template.yml
      parameters:
        TOPOLOGY: t0
        TEST_SET: t0-2vlans
        MIN_WORKER: $(T0_2VLANS_INSTANCE_NUM)
        MAX_WORKER: $(T0_2VLANS_INSTANCE_NUM)
        DEPLOY_MG_EXTRA_PARAMS: "-e vlan_config=two_vlan_a"

  - job: dualtor_testbedv2
    pool:
      vmImage: 'ubuntu-20.04'
    displayName: "kvmtest-dualtor-t0 by TestbedV2"
    timeoutInMinutes: 240
    condition: and(succeeded(), eq(variables.BUILD_IMG_RUN_TESTBEDV2_TEST, 'YES'))
    continueOnError: false
    steps:
      - template: ../.azure-pipelines/run-test-scheduler-template.yml
        parameters:
          TOPOLOGY: dualtor
          MIN_WORKER: $(T0_DUALTOR_INSTANCE_NUM)
          MAX_WORKER: $(T0_DUALTOR_INSTANCE_NUM)
          COMMON_EXTRA_PARAMS: "--disable_loganalyzer "

  - job: wan_testbedv2
    displayName: "kvmtest-wan by TestbedV2"
    pool:
      vmImage: 'ubuntu-20.04'
    timeoutInMinutes: 240
    condition: and(succeeded(), eq(variables.BUILD_IMG_RUN_TESTBEDV2_TEST, 'YES'))
    continueOnError: false
    steps:
      - template: ../.azure-pipelines/run-test-scheduler-template.yml
        parameters:
          TOPOLOGY: wan-pub
          MIN_WORKER: $(WAN_INSTANCE_NUM)
          MAX_WORKER: $(WAN_INSTANCE_NUM)
          COMMON_EXTRA_PARAMS: "--skip_sanity "
