# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr: none

schedules:
- cron: "0 0 * * *"
  displayName: Daily Build
  branches:
    include:
    - 202012
  always: true

pool: sonicbld

parameters:
  - name: jobFilters
    type: object
    default:
    - vs
    - broadcom
    - barefoot
    - centec
    - generic
    - innovium
    - mellanox
    - nephos

stages:
- stage: Build
  variables:
    CACHE_MODE: none
    VERSION_CONTROL_OPTIONS: 'SONIC_VERSION_CONTROL_COMPONENTS='
  jobs:
  - template: azure-pipelines-build.yml
    parameters:
      buildOptions: '${{ variables.VERSION_CONTROL_OPTIONS }} SONIC_BUILD_JOBS=$(nproc) ENABLE_IMAGE_SIGNATURE=y'
      jobFilters: ${{ parameters.jobFilters }}
      preSteps:
      - script: |
          containers=$(docker container ls | grep "sonic-slave" | awk '{ print $1 }')
          if [ ! -z "$containers" ]; then
            docker container kill $containers || true
            sleep 5
          fi
          images=$(docker images 'sonic-slave-*' -a -q)
          if [ ! -z "$images" ]; then
            docker rmi -f $images
          fi
        displayName: 'Cleanup sonic slave'
- stage: UpgradeVersions
  jobs:
  - job: UpgradeVersions
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - checkout: self
      displayName: 'Checkout code'
    - download: current
      patterns: '**/versions-*'
    - script: |
        # Cleanup the old versions
        rm -rf files/build/versions

        mkdir -p target
        default_platform=broadcom
        artifacts=$(find $(Pipeline.Workspace) -maxdepth 1 -type d -name 'sonic-buildimage.*' | grep -v "sonic-buildimage.${default_platform}")
        echo "artifacts$artifacts"
        cp -r $(Pipeline.Workspace)/sonic-buildimage.${default_platform}/target/versions target/
        make freeze FREEZE_VERSION_OPTIONS=-r
        find files/build/versions 
        ordered_artifacts=$(echo "$artifacts" | grep -v -E "arm64|armhf" && echo "$artifacts" | grep -E "arm64|armhf")
        for artifact in $ordered_artifacts
        do
          rm -rf target/versions
          cp -r $artifact/target/versions target/
          OPTIONS="-a -d"
          [[ "$artifact" == *arm64* || "$artifact" == *armhf* ]] && OPTIONS="-d"
          make freeze FREEZE_VERSION_OPTIONS="$OPTIONS"
        done
        git diff files/build/versions
      displayName: 'Freeze Versions'
    - publish: $(System.DefaultWorkingDirectory)/files/build/versions
      artifact: 'sonic-buildimage.versions'
      displayName: 'Archive SONiC versions'
    
