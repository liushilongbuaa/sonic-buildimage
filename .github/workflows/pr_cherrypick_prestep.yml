name: PreCherryPick
on:
  pull_request_target:
    types:
    - labeled
    - closed
    branches:
    - master

jobs:
  pre_cherry_pick:
    if: github.event.pull_request.merged == true && contains(join(github.event.pull_request.labels.*.name, ','), 'Approved for 20')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        persist-credentials: false
    - name: Debug
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo $GITHUB_CONTEXT | jq
    - name: Main
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
        TOKEN: ${{ secrets.TOKEN }}
      run: |
        set -e

        sha=$(echo $GITHUB_CONTEXT | jq -r ".event.pull_request.merge_commit_sha")
        pr_id=$(echo $GITHUB_CONTEXT | jq -r ".event.number")
        pr_url=$(echo $GITHUB_CONTEXT | jq -r ".event.pull_request._links.html.href")
        repository=$(echo $GITHUB_CONTEXT | jq -r ".repository")
        labels_json=$(echo $GITHUB_CONTEXT | jq -r ".event.pull_request.labels[].name")
        author=$(echo $GITHUB_CONTEXT | jq -r ".event.pull_request.base.user.login")
        branches=$(git branch -a --list 'origin/20????' | awk -F/ '{print$3}')
        echo =============================
        echo SHA:           $sha
        echo PRID:          $pr_id
        echo pr_url:        $pr_url
        echo repository:    $repository
        echo branches:      $branches
        echo labels_json:
        echo "$labels_json"
        echo ${TOKEN} | gh auth login --with-token
        echo author:        $author
        echo =============================

        git config user.name mssonicbld
        git config user.email sonicbld@microsoft.com
        git config credential.https://github.com.username mssonicbld
        git remote add mssonicbld https://mssonicbld:${TOKEN}@github.com/mssonicbld/sonic-buildimage
        git fetch mssonicbld
        git remote -vv

        cherry_pick(){
          set -e
          local create_pr=''
          local branch=$1
          if [ -z $branch ];then exit 0;fi
          while read label
          do
            echo label: $label
            if [[ "$label" == "Approved for $branch Branch" ]];then
              create_pr=1
            fi
            if [[ "$label" == "Created PR to $branch Branch" ]];then
              echo "already has tag: Created PR to $branch Branch, exit"
              exit 0
            fi
            if [[ "$label" == "Included in $branch Branch" ]];then
              echo "already has tag: Included in $branch Branch, exit"
              exit 0
            fi
            if [[ "$label" == "Cherry Pick Conflict_$branch" ]];then
              echo "already has tag: Cherry Pick Conflict_$branch, exit"
              exit 0
            fi
          done <<< "$labels_json"
          if [[ "$create_pr" != "1" ]];then
            echo "Didn't find 'Approved for $branch Branch' tag."
            exit 0
          fi
          # Begin to cherry-pick PR
          git cherry-pick --abort || true
          git clean -xdff || true
          git reset HEAD --hard || true
          git checkout -b $branch --track origin/$branch
          git status | grep "working tree clean"

          if ! git cherry-pick $sha;then
            echo 'cherry-pick failed.'
            git cherry-pick --abort
            # Add label
            gh pr edit $pr_url --add-label "Cherry Pick Conflict_$branch"
            echo 'Add label "Cherry Pick Conflict_$branch" success'
            gh pr comment $pr_url --body "@${author} PR conflicts with $branch branch"
            echo 'Add commnet "@${author} PR conflicts with $branch branch"'
          else
            # Create PR to release branch
            git push mssonicbld HEAD:$branch-${pr_id} -f
            result=$(gh pr create -R ${repository} -H mssonicbld:$branch-${pr_id} -B $branch -t "[action] Auto cherry-pick PR(#${pr_id}) into $branch branch" -b '')
            if [[ "$(echo $result | grep github.com)" == "" ]];then echo $result; exit 1;fi
            new_pr_rul=$(echo $result | grep github.com)
            echo new_pr_rul:    $new_pr_rul

            # Add label to old PR
            gh pr edit $pr_url --add-label "Created PR to $branch Branch"
            echo Add label Created PR to $branch Branch
            # Add comment to old PR
            gh pr comment $pr_url --body "Cherry-pick PR to $branch: ${new_pr_rul}"
            echo Add comment to old PR

            # Add label to new PR
            gh pr edit $new_pr_rul --add-label "automerge"
            echo Add label automerge to new PR
            # Add comment to new PR
            gh pr comment $new_pr_rul --body "Original PR: ${pr_url}"
            echo Add comment to new PR
          fi
        }

        for branch in $branches
        do
          echo -----------------------------
          echo Begin to parse Branch: $branch
          cherry_pick $branch
        done

